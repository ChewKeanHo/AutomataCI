name: Git Push
run-name: CI - Git Push
on:
  push:
    branches:
      - main
      - stable
      - next
      - testing
      - staging
      - edge
      - experimental
jobs:
  develop_on:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
        TERM: xterm-256color
        ROBOT_NAME: "github.actions.runner@github.com"
        ROBOT_EMAIL: "Github Actions Autonomous Runner System"
        REPO_NAME: ${{ github.event.repository.name }}
        REPO_URL: "${{ github.server_url  }}/${{ github.repository }}"
        REPO_COMMIT: "${{ github.sha }}"
        CONTAINER_USERNAME: ${{ secrets.CONTAINER_USERNAME }}
        CONTAINER_PASSWORD: ${{ secrets.CONTAINER_PASSWORD }}
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        PROJECT_SIMULATE_RELEASE_REPO: true
        PROJECT_ROBOT_RUN: true
    steps:
      - name: Git - INIT
        id: git_init
        run: |
          git config --global user.email "${{ env.ROBOT_NAME }}"
          git config --global user.name "${{ env.ROBOT_EMAIL }}"
          git config --global advice.detachedHead false
          git clone --depth=1 ${{ env.REPO_URL }} .
          git fetch origin ${{ env.REPO_COMMIT }}
          git checkout FETCH_HEAD
      - name: AutomataCI - PURGE
        id: automataci_ci_purge
        run: |
          ./automataCI/ci.sh.ps1 purge
      - name: AutomataCI - CLEAN
        id: automataci_ci_clean
        run: |
          ./automataCI/ci.sh.ps1 clean
      - name: AutomataCI - ENVIRONMENT
        id: automataci_ci_env
        run: |
          ./automataCI/ci.sh.ps1 env
      - name: AutomataCI - SETUP
        id: automataci_ci_setup
        run: |
          ./automataCI/ci.sh.ps1 setup
      - name: AutomataCI - PREPARE
        id: automataci_ci_prepare
        run: |
          ./automataCI/ci.sh.ps1 prepare
      - name: AutomataCI - START
        id: automataci_ci_start
        run: |
          ./automataCI/ci.sh.ps1 start
      - name: AutomataCI - TEST
        id: automataci_ci_test
        run: |
          ./automataCI/ci.sh.ps1 test
      - name: AutomataCI - MATERIALIZE
        id: automataci_ci_materialize
        run: |
          ./automataCI/ci.sh.ps1 materialize
      - name: AutomataCI - BUILD
        id: automataci_ci_build
        run: |
          ./automataCI/ci.sh.ps1 build
      - name: AutomataCI - NOTARIZE
        id: automataci_ci_notarize
        run: |
          ./automataCI/ci.sh.ps1 notarize
      - name: AutomataCI - PACKAGE
        id: automataci_ci_package
        run: |
          ./automataCI/ci.sh.ps1 package
      - name: AutomataCI - RELEASE
        id: automataci_ci_release
        run: |
          ./automataCI/ci.sh.ps1 release
      - name: AutomataCI - STOP
        id: automataci_ci_stop
        run: |
          ./automataCI/ci.sh.ps1 stop
      - name: AutomataCI - DEPLOY
        id: automataci_ci_deploy
        run: |
          ./automataCI/ci.sh.ps1 deploy
      - name: Archive Payloads Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.os }}
          path: |
            build/
            log/
            pkg/
            public/
      - name: Archive Workspace Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: workspace_${{ matrix.os }}
          path: |
            bin/
            lib/
            tmp/
            releases/
