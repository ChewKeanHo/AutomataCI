# AutomataCI - Project Configurations Data File
################################################################################
# WARNING: STRICTLY ONLY THESE PATTERN ARE ALLOWED:                            #
#                                                                              #
#             'key' = 'value: string type' # 1 line tailing comment            #
#                                                                              #
#                                 OR                                           #
#                                                                              #
#             # full line comment                                              #
#                                                                              #
#          Both Batch and POSIX Shell do not have sophisicated functions       #
#          (e.g. POSIX Shell does not have array at all!).                     #
#                                                                              #
#          DO NOT get too creative with TOML!                                  #
################################################################################
####################
# PROJECT METADATA #
####################
# PROJECT_SKU
# This is the known product ID used as a command, marketing brand, etc.
# It should be in lowercase and should not be using dash ('-'),
# underscore ('_'), and space (' ') for maximum compatibility.
PROJECT_SKU = "automataci"


# PROJECT_SKU_TITLECASE
# The titlecase version of PROJECT_SKU. Used in certain packager control scripts
# like Homebrew. Conditions is the same as PROJECT_SKU except it is in the
# TitleCase representation.
PROJECT_SKU_TITLECASE = "AutomataCI"


# PROJECT_APP_ID
# This is the known application complying to the unique 3-parts identifier
# (e.g. com.example.www) used in Flatpak, Google Play Store, etc. The triples
# must be a reversed domain with no dash ('-') and underscore ('_'). For GitHub
# projects, it's advisable to use 'io.github.[owner].[project]' format instead
# to avoid naming conflict.
PROJECT_APP_ID = "com.github.chewkeanho.automataci"


# PROJECT_NAME
# This is the name of the product used in documentation, marketing addresses
# etc only. For programming purposes, PROJECT_SKU is used instead.
PROJECT_NAME = "AutomataCI"


# PROJECT_PITCH
# A short elevator pitch about the project used as a short description. Max
# Max: 60 characters.
PROJECT_PITCH = "Solid Foundation for Kickstarting Your Software Development"


# PROJECT_VERSION
# This is to declare the current project's version. It can be used for
# generating version declaration files (e.g. VERSION, version.go, etc). You
# should only update this field and leave the AutomataCI to generate those
# output files.
#
# In case of a release with purpose like release candidates, tlide (~) is used
# like '0.0.1~rc1' instead of dashes (-). Some distribution ecosystem have
# strict and reserved rules for version sorting using dashes so tlide will be
# the best choice.
PROJECT_VERSION = "1.7.0"


# PROJECT_CADENCE
# The build cadence number usually to indicate the multiple builds of the same
# version like '12312' where some packager will generate the final version
# number as: '0.0.1-rc1-12312' or '0.0.1-12312'.
#
# When it doubt or unused, set to 1 and use numerical increment only.
PROJECT_CADENCE = "1"


# PROJECT_LICENSE
# The SPDX license tag. Refer https://spdx.org/licenses/ for finding or
# constructing your license identifier.
PROJECT_LICENSE = "Apache-2.0"


# PROJECT_SOURCE_URL
# The Project's source code URL. This URL points to the source code location.
# The URL can be used for other purposes such as The Docker's OCI Image source
# field (org.opencontainers.image.source) which can be used for other connecting
# purposes like GitHub Repo-Packages linking. See:
#     1. https://docs.github.com/en/packages/learn-github-packages/connecting-a-repository-to-a-package
#
# Example:
#     1. GitHub Packages : https://github.com/OWNER/REPO
PROJECT_SOURCE_URL = "https://github.com/ChewKeanHo/AutomataCI"




######################
# NIM TECHNOLOGY     #
######################
# PROJECT_NIM
# This is a control variable used for enabling Go technology and also defining
# its source codes directory relative to PROJECT_PATH_ROOT. Depending on the
# offered service (e.g. GitHub Actions), setting this variable with value shall
# notify the CI provider to setup Go development environment automatically.
#
# To enable it: simply supply the path (e.g. default is 'srcGO').
# To disable it: simply supply an empty path (e.g. default is '').
PROJECT_NIM = ''


# PROJECT_PATH_NIM_ENGINE
# This is a relative pathing to PROJECT_PATH_ROOT + PROJECT_PATH_TOOLS for
# setting up localized environment.
PROJECT_PATH_NIM_ENGINE = "nim-engine"




######################
# C TECHNOLOGY       #
######################
# PROJECT_C
# This is a control variable used for enabling C technology and also defining
# its source codes directory relative to PROJECT_PATH_ROOT. Depending on the
# offered service (e.g. GitHub Actions), setting this variable with value shall
# notify the CI provider to setup Go development environment automatically.
#
# To enable it: simply supply the path (e.g. default is 'srcC').
# To disable it: simply supply an empty path (e.g. default is '').
PROJECT_C = ''




######################
# GO TECHNOLOGY      #
######################
# PROJECT_GO
# This is a control variable used for enabling Go technology and also defining
# its source codes directory relative to PROJECT_PATH_ROOT. Depending on the
# offered service (e.g. GitHub Actions), setting this variable with value shall
# notify the CI provider to setup Go development environment automatically.
#
# To enable it: simply supply the path (e.g. default is 'srcGO').
# To disable it: simply supply an empty path (e.g. default is '').
PROJECT_GO = 'srcGO'


# PROJECT_PATH_GO_ENGINE
# This is a relative pathing to PROJECT_PATH_ROOT + PROJECT_PATH_TOOLS for
# setting up localized environment.
PROJECT_PATH_GO_ENGINE = "go-engine"




######################
# PYTHON TECHNOLOGY  #
######################
# PROJECT_PYTHON
# This is a control variable used for enabling Python technology and also
# defining its source codes directory relative to PROJECT_PATH_ROOT.
# Depending on the offered service (e.g. GitHub Actions), setting this
# variable with value shall notify the CI provider to setup Python development
# environment automatically.
#
# To enable it: simply supply the path (e.g. default is 'srcPYTHON').
# To disable it: simply supply an empty path (e.g. default is '').
PROJECT_PYTHON = ''


# PROJECT_PATH_PYTHON_ENGINE
# This is a relative pathing to PROJECT_PATH_ROOT + PROJECT_PATH_TOOLS for
# setting up venv location.
PROJECT_PATH_PYTHON_ENGINE = "python-engine"


# PROJECT_PYPI_REPO_URL
# The PyPi upstream repo to push the PyPi package. The defualt PyPi values are:
#     Test Zone : https://test.pypi.org/legacy/
#     Actual    : https://upload.pypi.org/legacy/
PROJECT_PYPI_REPO_URL = "https://test.pypi.org/legacy/"


# PROJECT_PYPI_README
# The PyPi README file relative to PROJECT_PATH_ROOT directory. Default is the
# the common README.md. It **MUST** be a file.
PROJECT_PYPI_README = "README.md"


# PROJECT_PYPI_README_MIME
# The PyPi README file relative to PROJECT_PATH_ROOT directory. Default is the
# the common README.md which is a 'text/markdown' MIME type.
PROJECT_PYPI_README_MIME = "text/markdown"




##########################
# DISTRIBUTION ECOSYSTEM #
##########################
# PROJECT_CONTACT_NAME
# Entity's full name for inquiries.
PROJECT_CONTACT_NAME = "Your Legal Full Name Here"


# PROJECT_CONTACT_EMAIL
# Entity's email channel for email communications.
PROJECT_CONTACT_EMAIL = "contact@youremail.example"


# PROJECT_CONTACT_WEBSITE
# Entity's website channel for sourcing information.
PROJECT_CONTACT_WEBSITE = "https://your-product.website.here"


# PROJECT_GPG_ID
# Your GPG ID for signing here. Note that this requires GPG to be installed in
# the system and the secret key is available for performing such transaction.
PROJECT_GPG_ID = ""


# PROJECT_CHANGELOG_TITLE
# The title of the changelog file.
PROJECT_CHANGELOG_TITLE = "Changelog | 更新日志 | Endringslogg | Cacatan Perubahan | Ändringslogg | 変更履歴"

# PROJECT_RELEASE_SHA256
# Perform SHA256 checksum file generation in Release job. To disable it, simply
# let it empty.
#
# Otherwise, as long as it's not empty, it is enabled.
PROJECT_RELEASE_SHA256 = "enabled"


# PROJECT_RELEASE_SHA512
# Perform SHA512 checksum file generation. To disable it, simply let it
# empty.
#
# Otherwise, as long as it's not empty, it is enabled.
PROJECT_RELEASE_SHA512 = "enabled"


# PROJECT_DEBIAN_IS_NATIVE
# Flag to determine the project is Debian natively sponsored package. Usually
# is false.
# Only accept: "true/false"
PROJECT_DEBIAN_IS_NATIVE = "false"


# PROJECT_DEBIAN_PRIORITY
# Indicate the current package's distribution priority. Strictly the following
# values
#  (1) required
#  (2) important
#  (3) standard
#  (4) optional
#  (5) extra
# see https://www.debian.org/doc/debian-policy/ch-archive.html#s-priorities for
# more info.
PROJECT_DEBIAN_PRIORITY = "optional"


# PROJECT_DEBIAN_DISTRIBUTION
# The distribution series for compiling the .deb pakage changelog. See this page
# for more info:
# https://www.debian.org/doc/debian-policy/ch-controlfields.html#id25
# https://www.debian.org/doc/debian-policy/ch-source.html#debian-changelog-debian-changelog
#
# Strictly of the following values:
#   (1) stable = for stable branches (e.g. 'main')
#   (2) unstable OR testing = for next release branches (e.g 'staging', or 'next').
#   (3) experimental = for latest branches (e.g 'experimental' or 'edge').
PROJECT_DEBIAN_DISTRIBUTION = "stable"


# PROJECT_DEBIAN_URGENCY
# The urgency value for compiling the .deb pakage changelog. See this page
# for more info:
# https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-urgency
# https://www.debian.org/doc/debian-policy/ch-source.html#debian-changelog-debian-changelog
#
# Strictly of the following values:
#   (1) low
#   (2) medium
#   (3) high           = for user diversions
#   (4) emergency
#   (5) critical
PROJECT_DEBIAN_URGENCY = "low"


# PROJECT_DEBIAN_SECTION
# The categories the project belongs to in the Debian .deb package ecosystem.
# Contains restricted values. Refer:
#      https://www.debian.org/doc/debian-policy/ch-archive.html#sections
# For maximum compliances
PROJECT_DEBIAN_SECTION="devel"


# PROJECT_FLATPAK_RUNTIME
# The runtime module where the Flatpak is operating on.
PROJECT_FLATPAK_RUNTIME="org.freedesktop.Platform"


# PROJECT_FLATPAK_RUNTIME_VERSION
# The runtime module where the Flatpak is operating on.
PROJECT_FLATPAK_RUNTIME_VERSION="22.08"


# PROJECT_FLATPAK_SDK
# The runtime module where the Flatpak is operating on.
PROJECT_FLATPAK_SDK="org.freedesktop.Sdk"


# PROJECT_REPREPRO_CODENAME
# The codename used by .deb's Reprepro for publishing any detected .deb package
# file. In any cases, the value **MUST** match any one of the 'Codename:' field
# understood by the reprepro.
#
# When in doubt or unused, set the value to 'main'.
PROJECT_REPREPRO_CODENAME="main"


# PROJECT_REPREPRO_COMPONENT
# The component used by .deb's Reprepro for publishing any detected .deb package
# file. In any case, the value **MUST** match any one of the 'Component:' field
# understood by the reprepro.
#
# This is mainly used to group the packages by categories (e.g. 'firmware',
# 'gui', 'models', etc).
#
# When in doubt or unused, set the value matching PROJECT_DEBIAN_DISTRIBUTION.
PROJECT_REPREPRO_COMPONENT="stable"


# PROJECT_REPREPRO_ARCH
# The list of accepted reprepro architecture used by .deb's Reprepro for
# gatekeeping a given .deb package. It accepts a list of values separated by
# space (' ') based on dpkg supported architectures. The command:
#                   "$ dpkg-architecture --list-known"
# will print out a list of supported architectures' value based on the host
# syste.
#
# When left empty, AutomataCI shall generate a full list of arch-only hard-coded
# arch values.
PROJECT_REPREPRO_ARCH=""


# PROJECT_STATIC_REPO
# The git repository for publishing all the packages using static file sharing
# (e.g. .deb repo, .rpm repo, flatpak repo, etc). This URL shall be git cloned
# as the PROJECT_PATH_RELEASE directory.
PROJECT_STATIC_REPO="git@github.com:ChewKeanHo/AutomataCI.wiki.git"


# PROJECT_STATIC_REPO_KEY
# The git upstream key. Default is 'origin'.
PROJECT_STATIC_REPO_KEY="origin"


# PROJECT_STATIC_REPO_BRANCH
# The git upstream branch. Default is 'master' or 'main'.
PROJECT_STATIC_REPO_BRANCH="master"


# PROJECT_STATIC_REPO_DIRECTORY
# The directory name housing the static repo. Value CANNOT be empty.
# Default is 'static'.
PROJECT_STATIC_REPO_DIRECTORY="static"


# PROJECT_SIMULATE_RELEASE_REPO
# A flag to disable PROJECT_STATIC_REPO supplied from an external automated
# ecosystem to construct a simulated blank repository instead of sourcing. This
# is made primarily created for situation where release repository has complex
# security access or the ecosystem is not using Release Job at all (e.g. GitHub
# Actions).
#
# To disable it: leave it empty.
# To enable it: make it non-empty (e.g. 'true' string).
# PROJECT_SIMULATE_RELEASE_REPO=""  # Reserved - provided by external ecosystem.


# PROJECT_STATIC_URL
# The public facing base URL for accessing the published static repo. This URL
# shall be used to construct the final user instructions across various
# distribution ecosystems.
PROJECT_STATIC_URL="https://github.com/ChewKeanHo/AutomataCI/wiki/"


# PROJECT_CONTAINER_REGISTRY
# The container registry URI value. DO NOT end with a slash. Example:
#     1. DockerHub     : registry.hub.docker.com/[ NAMESPACE ]
#     2. GitHub Package: ghcr.io/[ NAMESPACE ]
#     2. Local         : localhost:5000/[ NAMESPACE ]
PROJECT_CONTAINER_REGISTRY = "ghcr.io/chewkeanho"


# DOCKER_CLI_EXPERIMENTAL
# Enable the Docker's experimental CLI features for using buildx. If disabled,
# is shall break many of the CI job.
DOCKER_CLI_EXPERIMENTAL = "enabled"


# PROJECT_HOMEBREW_REPO
# The Homebrew formula publication git repository for updating and publishing
# Homebrew's formula. This is used in release job.
PROJECT_HOMEBREW_REPO="git@github.com:ChewKeanHo/Testbed.git"


# PROJECT_HOMEBREW_REPO_KEY
# The git upstream key. Default is 'origin'.
PROJECT_HOMEBREW_REPO_KEY="origin"


# PROJECT_HOMEBREW_REPO_BRANCH
# The git upstream branch. Default is 'main' or 'master'.
PROJECT_HOMEBREW_REPO_BRANCH="main"


# PROJECT_HOMEBREW_DIRECTORY
# The directory name housing the Homebrew repo. Value CANNOT be empty.
# Default is 'homebrew'.
PROJECT_HOMEBREW_DIRECTORY="homebrew"


# PROJECT_HOMEBREW_SOURCE_URL
# The base URL for Homebrew to source its tar.*z archive file. It is made
# available for maintaining consistency purposes and is only meant for Homebrew
# use for constructing the 'url' value.
#
# NOTE: Please avoid ending with the URL slash.
PROJECT_HOMEBREW_SOURCE_URL="https://github.com/ChewKeanHo/AutomataCI/releases/download"


# PROJECT_CHOCOLATEY_REPO
# The Chocolatey package publication git repository for updating and publishing
# Chocolatey's usable nupkg packages. This is used in release job.
PROJECT_CHOCOLATEY_REPO="git@github.com:ChewKeanHo/Testbed.git"


# PROJECT_CHOCOLATEY_REPO_KEY
# The git upstream key. Default is 'origin'.
PROJECT_CHOCOLATEY_REPO_KEY="origin"


# PROJECT_CHOCOLATEY_REPO_BRANCH
# The git upstream branch. Default is 'main' or 'master'.
PROJECT_CHOCOLATEY_REPO_BRANCH="main"


# PROJECT_CHOCOLATEY_DIRECTORY
# The directory name housing the Chocolatey repo. Value CANNOT be empty.
# Default is 'chocolatey'.
PROJECT_CHOCOLATEY_DIRECTORY="chocolatey"


# PROJECT_CHOCOLATEY_SOURCE_URL
# The base URL for Chocolatey to source its .nupkg packages. It is made
# available for maintaining consistency purposes and is only meant for
# Chocolatey use for constructing the 'url' value.
#
# NOTE: Please avoid ending with the URL slash.
PROJECT_CHOCOLATEY_SOURCE_URL="https://github.com/ChewKeanHo/AutomataCI/releases/download"




######################
# PROJECT FILESYSTEM #
######################
# PROJECT_PATH_ROOT
# This is an absolute pathing to locate the root directory of the project
# repository.
# PROJECT_PATH_ROOT = '...' # Reserved - determined by ci.cmd automatically.


# PROJECT_PATH_AUTOMATA
# This is the reserved pathing to PROJECT_PATH_ROOT where it locates the
# AutomataCI working directory.
#
# WARNING: DO NOT attempt to change/override this naming convention. It will
# break AutomataCI.
# PROJECT_PATH_AUTOMATA = "automataCI" # Reserved - determined by ci.cmd automatically.


# PROJECT_PATH_SOURCE
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# baseline source directory independent of technological section and acts as an
# overall controls.
PROJECT_PATH_SOURCE = "src"


# PROJECT_PATH_TOOLS
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's tooling directory like programming languages' engine or executables.
PROJECT_PATH_TOOLS = "tools"


# PROJECT_PATH_BUILD
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's build output directory.
PROJECT_PATH_BUILD = "build"


# PROJECT_PATH_BIN
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's shippable executable binraries.
PROJECT_PATH_BIN = "bin"


# PROJECT_PATH_LIB
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's shippable importable libraries.
PROJECT_PATH_LIB = "lib"


# PROJECT_PATH_TEMP
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's temporary workspace directory.
PROJECT_PATH_TEMP = "tmp"


# PROJECT_PATH_LOG
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's log output directory.
PROJECT_PATH_LOG = "log"


# PROJECT_PATH_CI
# This is the relative pathing to PROJECT_PATH_ROOT + PROJECT_PATH_SOURCE where
# it locates the project's tech-specific CI job directory.
PROJECT_PATH_CI = ".ci"


# PROJECT_PATH_PKG
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's releasable packages output directory.
PROJECT_PATH_PKG = "pkg"


# PROJECT_PATH_RELEASE
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's publication output directory.
PROJECT_PATH_RELEASE = "releases"


# PROJECT_PATH_DOCS
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's documentation directory.
PROJECT_PATH_DOCS = "public"


# PROJECT_PATH_RESOURCES
# This is the relative pathing to PROJECT_PATH_ROOT where it locates the
# project's main non-code generative materials directory.
PROJECT_PATH_RESOURCES = "src"
